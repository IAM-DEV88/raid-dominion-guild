<div id="smoke-bkg" class="absolute z-[-1]"></div>

<script>
  import * as THREE from "three";

  const $bkg = document.getElementById("smoke-bkg");
  let w = window.innerWidth;
  let h = window.innerHeight;
  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000);
  camera.position.z = 500;
  scene.add(camera);

  const renderer = new THREE.WebGLRenderer({ alpha: true });
  renderer.setSize(w, h);
  renderer.setClearColor(0x000000, 0);

  $bkg?.appendChild(renderer.domElement);

  const smokeParticles: THREE.Mesh[] = [];
  const loader = new THREE.TextureLoader();
  loader.crossOrigin = "";

  loader.load("/smoke.webp", (texture) => {
    const smokeGeo = new THREE.PlaneGeometry(300, 300);
    const NUM_OF_PARTICLES = 100;

    for (let p = 0; p < NUM_OF_PARTICLES; p++) {
      const smokeMaterial = new THREE.MeshBasicMaterial({
        map: texture,
        transparent: true,
        opacity: 0.1,
        color: getRandomColor(),
      });

      const particle = new THREE.Mesh(smokeGeo, smokeMaterial);

      // Posicionar las partículas en el centro
      particle.position.set(
      Math.random() * 400 - 200,
      Math.random() * -100 - 10,
      0
      );

      particle.userData = {
        pulseOffset: Math.random() * 0.0005 - 0.0001,
        pulseSpeed: Math.random() * 0.0001 - 0.00001,
        rotationSpeed: Math.random() * 0.0005 - 0.0001,
        floatSpeed: Math.random() * 1 + 0.05,
        direction: Math.random() < 0.5 ? -1 : 1, // -1 para izquierda, 1 para derecha
        maxDistance: Math.random() * 50,
        distance: 0,
      };

      scene.add(particle);
      smokeParticles.push(particle);
    }
  });

  function resize() {
    w = window.innerWidth;
    h = window.innerHeight;
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
  }

  function getRandomColor() {
    const randomNum = Math.random();
    if (randomNum < 0.15) return new THREE.Color(0x0088bc);
    if (randomNum < 0.25) return new THREE.Color(0x0077ab);
    if (randomNum < 0.5) return new THREE.Color(0x006698);
    return new THREE.Color(0x111111);
  }

  let lastTime = 0;

  function animate(time: number) {
    const deltaTime = time - lastTime;
    if (deltaTime >= 1000 / 60) {
      lastTime = time;

      smokeParticles.forEach((particle) => {
        const { material, userData } = particle;

        // Mover la partícula horizontalmente
        userData.distance +=
          userData.floatSpeed * deltaTime * 0.01 * userData.direction;
        particle.rotation.z += userData.rotationSpeed * deltaTime;

        if (Math.abs(userData.distance) > userData.maxDistance) {
          userData.direction *= -1; // Cambiar dirección
        }

        particle.position.x = userData.distance;

        if (material instanceof THREE.MeshBasicMaterial) {
          const pulse =
            Math.sin(time * userData.pulseSpeed + userData.pulseOffset) * 0.5 +
            0.5;
          material.opacity =pulse * 0.3;

          if (Math.random() < 0.005) {
            const colorPulse =
              Math.sin(time * 0.5 + userData.pulseOffset) * 0.5 + 0.5;
            material.color.lerpColors(
              material.color,
              getRandomColor(),
              colorPulse
            );
          }
        }
      });

      renderer.render(scene, camera);
    }

    requestAnimationFrame(animate);
  }

  animate(0);

  window.addEventListener("resize", resize);
</script>
